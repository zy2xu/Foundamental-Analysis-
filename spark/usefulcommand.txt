val customSchema = StructType(Array(
        StructField("ID", StringType, true),
        StructField("Name", StringType, true),
        StructField("NetIncomeLoss", StringType, true),
        StructField("AssetsCurrent", StringType, true),
        StructField("LiabilitiesCurrent", StringType, true),
        StructField("PropertyPlantAndEquipmentNet", StringType, true),
        StructField("PropertyPlantAndEquipmentGross", StringType, true),
        StructField("LongTermDebtCurrent", StringType, true),
        StructField("LongTermDebtNoncurrent", StringType, true),
        StructField("Liabilities", StringType, true),
        StructField("StockholdersEquity", StringType, true),
        StructField("RetainedEarningsAccumulatedDeficit", StringType, true),
        StructField("GrossProfit", StringType, true),
        StructField("SalesRevenueNet", StringType, true),
        StructField("Revenues", StringType, true),
        StructField("SellingGeneralAndAdministrativeExpense", StringType, true),
        StructField("ResearchAndDevelopmentExpense", StringType, true),
        StructField("DepreciationDepletionAndAmortization", StringType, true),
        StructField("InterestExpense", StringType, true),
        StructField("InterestExpenseDebt", StringType, true),
        StructField("InterestPaid", StringType, true),
        StructField("IncomeTaxExpenseBenefit", StringType, true),
        StructField("IncomeTaxesPaidNet", StringType, true),
        StructField("EarningsPerShareBasic", StringType, true),
        StructField("EarningsPerShareDiluted", StringType, true),
        StructField("Assets", StringType, true),
        StructField("CashAndCashEquivalentsAtCarryingValue", StringType, true),
        StructField("NetCashProvidedByUsedInFinancingActivities", StringType, true),
        StructField("NetCashProvidedByUsedInInvestingActivities", StringType, true),
        StructField("NetCashProvidedByUsedInOperatingActivities", StringType, true),
        StructField("OperatingIncomeLoss", StringType, true),
        StructField("Goodwill", StringType, true)))

val data = spark.read.format("csv").option("header","false").option("delimiter", ",").option("timestampFormat", "yyyy/MM/dd HH:mm:ss").schema(customSchema).load("file:///Users/zy2xu/Desktop/git/foundamentals/data/2017.csv")

data.write.format("parquet").save("./data/2017.parquet")

val data17 = spark.read.parquet("./2017").withColumn("Year", lit("2017"))

val data = dataCombined.withColumn("ROE", round($"ROE",3)).withColumn("CR", round($"CR",3)).withColumn("DE", round($"DE",3)).withColumn("GPM", round($"GPM",3)).withColumn("SGA", round($"SGA",3)).withColumn("NE", round($"NE",3))

val dataCombined = data.withColumn("CR", col("AssetsCurrent") / col("LiabilitiesCurrent")).withColumn("DE", col("Liabilities") / col("StockholdersEquity")).withColumn("GPM", col("GrossProfit") / col("Revenues")).withColumn("SGA", col("SellingGeneralAndAdministrativeExpense") / col("GrossProfit")).withColumn("NE", col("NetIncomeLoss") / col("Revenues"))

dataCombined.filter(col("ID") === "320193").select("Year","Name","ID","ROE","CR","DE","GPM","SGA","NE").orderBy(asc("Year")).show(10,false)

dataCombined.filter("ROE is not null and ROE > 0").filter("CR is not null and CR > 1").filter("DE is not NULL and DE > 0").filter("GPM is not null").filter("SGA is not null").filter("NE is not null").filter(col("Year") === "2017").select("Name","ROE","CR","DE","GPM","SGA","NE").orderBy(desc("ROE")).show(200)
