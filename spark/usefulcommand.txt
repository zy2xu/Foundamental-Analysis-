val customSchema = StructType(Array(
        StructField("ID", StringType, true),
        StructField("Name", StringType, true),
        StructField("NetIncomeLoss", StringType, true),
        StructField("AssetsCurrent", StringType, true),
        StructField("LiabilitiesCurrent", StringType, true),
        StructField("PropertyPlantAndEquipmentNet", StringType, true),
        StructField("PropertyPlantAndEquipmentGross", StringType, true),
        StructField("LongTermDebtCurrent", StringType, true),
        StructField("LongTermDebtNoncurrent", StringType, true),
        StructField("Liabilities", StringType, true),
        StructField("StockholdersEquity", StringType, true),
        StructField("RetainedEarningsAccumulatedDeficit", StringType, true),
        StructField("GrossProfit", StringType, true),
        StructField("SalesRevenueNet", StringType, true),
        StructField("Revenues", StringType, true),
        StructField("SellingGeneralAndAdministrativeExpense", StringType, true),
        StructField("ResearchAndDevelopmentExpense", StringType, true),
        StructField("DepreciationDepletionAndAmortization", StringType, true),
        StructField("InterestExpense", StringType, true),
        StructField("InterestExpenseDebt", StringType, true),
        StructField("InterestPaid", StringType, true),
        StructField("IncomeTaxExpenseBenefit", StringType, true),
        StructField("IncomeTaxesPaidNet", StringType, true),
        StructField("EarningsPerShareBasic", StringType, true),
        StructField("EarningsPerShareDiluted", StringType, true),
        StructField("Assets", StringType, true),
        StructField("CashAndCashEquivalentsAtCarryingValue", StringType, true),
        StructField("NetCashProvidedByUsedInFinancingActivities", StringType, true),
        StructField("NetCashProvidedByUsedInInvestingActivities", StringType, true),
        StructField("NetCashProvidedByUsedInOperatingActivities", StringType, true),
        StructField("OperatingIncomeLoss", StringType, true),
        StructField("Goodwill", StringType, true)))

val data = spark.read.format("csv").option("header","false").option("delimiter", ",").option("timestampFormat", "yyyy/MM/dd HH:mm:ss").schema(customSchema).load("file:///Users/zy2xu/Desktop/git/foundamentals/data/2017.csv")
